from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship, Session, declarative_base
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@db:5432/medical_forum')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Topic(Base):
    __tablename__ = 'topics'
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=False)
    content = Column(Text, nullable=False)
    author_id = Column(Integer, nullable=False)  # ID –∞–≤—Ç–æ—Ä–∞ —Ç–µ–º—ã
    
    replies = relationship('Reply', back_populates='topic')

class Reply(Base):
    __tablename__ = 'replies'
    
    id = Column(Integer, primary_key=True, index=True)
    content = Column(Text, nullable=False)
    author_id = Column(Integer, nullable=False)  # ID –∞–≤—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    topic_id = Column(Integer, ForeignKey('topics.id'), nullable=False)
    
    topic = relationship('Topic', back_populates='replies')


# –°—Ö–µ–º—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (Pydantic –º–æ–¥–µ–ª–∏)
class TopicCreate(BaseModel):
    title: str
    content: str
    author_id: int  # ID –∞–≤—Ç–æ—Ä–∞ —Ç–µ–º—ã

class ReplyCreate(BaseModel):
    content: str
    author_id: int  # ID –∞–≤—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    topic_id: int  # ID —Ç–µ–º—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()


# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# üîπ –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É
@app.post("/topics/", response_model=dict)
def create_topic(topic: TopicCreate, db: Session = Depends(get_db)):
    new_topic = Topic(
        title=topic.title,
        content=topic.content,
        author_id=topic.author_id
    )
    db.add(new_topic)
    db.commit()
    db.refresh(new_topic)
    return {"message": "–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", "topic_id": new_topic.id}


# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º
@app.get("/topics/", response_model=list)
def get_all_topics(db: Session = Depends(get_db)):
    topics = db.query(Topic).all()
    return topics


# üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –ø–æ ID
@app.get("/topics/{topic_id}", response_model=dict)
def get_topic(topic_id: int, db: Session = Depends(get_db)):
    topic = db.query(Topic).filter(Topic.id == topic_id).first()
    if not topic:
        raise HTTPException(status_code=404, detail="–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return topic


# üîπ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫ —Ç–µ–º–µ
@app.post("/replies/", response_model=dict)
def create_reply(reply: ReplyCreate, db: Session = Depends(get_db)):
    topic = db.query(Topic).filter(Topic.id == reply.topic_id).first()
    if not topic:
        raise HTTPException(status_code=404, detail="–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    new_reply = Reply(
        content=reply.content,
        author_id=reply.author_id,
        topic_id=reply.topic_id
    )
    db.add(new_reply)
    db.commit()
    db.refresh(new_reply)
    return {"message": "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", "reply_id": new_reply.id}


# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ ID —Ç–µ–º—ã
@app.get("/topics/{topic_id}/replies/", response_model=list)
def get_replies_by_topic(topic_id: int, db: Session = Depends(get_db)):
    replies = db.query(Reply).filter(Reply.topic_id == topic_id).all()
    return replies


# üîπ –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É –ø–æ ID
@app.delete("/topics/{topic_id}", response_model=dict)
def delete_topic(topic_id: int, db: Session = Depends(get_db)):
    topic = db.query(Topic).filter(Topic.id == topic_id).first()
    if not topic:
        raise HTTPException(status_code=404, detail="–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    db.delete(topic)
    db.commit()
    return {"message": "–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}


# üîπ –£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ ID
@app.delete("/replies/{reply_id}", response_model=dict)
def delete_reply(reply_id: int, db: Session = Depends(get_db)):
    reply = db.query(Reply).filter(Reply.id == reply_id).first()
    if not reply:
        raise HTTPException(status_code=404, detail="–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    db.delete(reply)
    db.commit()
    return {"message": "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
